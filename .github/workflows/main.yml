name: Deploy to Server

on:
  push:
    branches: [ dev, main, master ]
  pull_request:
    types: [closed]
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to server (with Git fix)
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          cd ${{ secrets.PROJECT_PATH }}
          echo "Current directory: $(pwd)"
          
          # Fix Git permissions properly
          echo "Fixing Git directory permissions..."
          
          # Check current user and permissions
          echo "Current user: $(whoami)"
          echo "Current directory permissions:"
          ls -la .git/ 2>/dev/null || echo "No .git directory found"
          
          # Fix ownership and permissions
          sudo chown -R $(whoami):$(whoami) .git/ 2>/dev/null || echo "sudo chown failed, trying without sudo"
          chown -R $(whoami):$(whoami) .git/ 2>/dev/null || echo "chown failed"
          
          sudo chmod -R 755 .git/ 2>/dev/null || echo "sudo chmod failed, trying without sudo"
          chmod -R 755 .git/ 2>/dev/null || echo "chmod failed"
          
          # Test if Git is working now
          if ! git status >/dev/null 2>&1; then
            echo "Git still not working. Recreating Git repository..."
            # Backup current .git
            mv .git .git.broken 2>/dev/null || true
            
            # Initialize fresh Git repository
            git init
            git remote add origin https://github.com/brtprivate/dev_db.git
            
            # Set up Git configuration
            git config user.name "Deployment Bot"
            git config user.email "deploy@example.com"
          fi
          
          # Configure Git safe directory
          git config --global --add safe.directory ${{ secrets.PROJECT_PATH }}
          
          # Set repository URL
          REPO_URL="https://github.com/brtprivate/dev_db.git"
          git remote set-url origin "$REPO_URL"
          
          # Stash any local changes
          echo "Stashing any local changes..."
          git stash 2>/dev/null || echo "No changes to stash"
          
          # Reset to clean state
          echo "Resetting to clean state..."
          git reset --hard HEAD
          
          # Clean untracked files
          echo "Cleaning untracked files..."
          git clean -fd
          
          # Fetch latest changes
          echo "Fetching latest changes from origin..."
          git fetch origin
          
          # Get current branch name
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CURRENT_BRANCH"
          
          # Check available branches
          echo "Available remote branches:"
          git branch -r
          
          # Pull from current branch
          echo "Pulling from $CURRENT_BRANCH branch..."
          if git pull origin "$CURRENT_BRANCH"; then
            echo "Git pull successful!"
          else
            echo "Git pull failed. Trying hard reset to origin/$CURRENT_BRANCH..."
            git reset --hard "origin/$CURRENT_BRANCH"
            echo "Hard reset completed!"
          fi
          
          # Verify the pull worked
          echo "Current branch status:"
          git status
          echo "Latest commit:"
          git log --oneline -1
          
          echo "Deployment completed successfully!"
