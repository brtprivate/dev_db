name: Deploy to Production Server

on:
  push:
    branches: [ dev main master ]
  pull_request:
    types: [closed]
    branches: [ main master ]
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Navigate to your project directory
          cd ${{ secrets.PROJECT_PATH }}
          
          # Debug: Show current directory and git status
          echo "Current directory: $(pwd)"
          echo "Git status:"
          git status
          echo "Git remote:"
          git remote -v
          echo "Current branch:"
          git branch
          
          # Fix Git permissions without sudo
          git config --global --add safe.directory ${{ secrets.PROJECT_PATH }}
          git config --global --add safe.directory /www/wwwroot/other/dev_db_mongoweb
          
          # Try to pull with detailed error output
          echo "Attempting git pull from master..."
          if git pull origin master; then
            echo "Git pull successful"
          else
            echo "Git pull failed with error: $?"
            echo "Trying alternative approach..."
            # Try alternative approach with detailed output
            echo "Fetching from origin master..."
            git fetch origin master
            echo "Resetting to origin/master..."
            git reset --hard origin/master
            echo "Alternative approach completed"
          fi
          
          # Show final git status
          echo "Final git status:"
          git status
          echo "Current commit:"
          git log --oneline -1
          
          # Optional: Install dependencies if package.json changed
          # Check if dependencies changed (safer approach)
          if [ -f "pnpm-lock.yaml" ] && [ -f "package.json" ]; then
            echo "Checking for dependency changes..."
            # Simple check: if lock file is newer than last install
            if [ ! -d "node_modules" ] || [ "pnpm-lock.yaml" -nt "node_modules" ]; then
              echo "Dependencies changed or missing, installing..."
              pnpm install
            else
              echo "Dependencies up to date"
            fi
          fi
          
          # Optional: Restart your application (uncomment if needed)
          # pm2 restart mongoweb || pnpm start
          
          echo "Deployment completed successfully!"
